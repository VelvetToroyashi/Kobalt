@page "/"
@using MudBlazor.Services
@implements IAsyncDisposable

<MudLayout>
    <MudContainer Class="mt-5" MaxWidth="@_maxWidth">
        <MudText Align="Align.Center" Typo="Typo.h2">Kobalt.</MudText>
        <MudDivider/>
        <MudText Align="Align.Center" Typo="Typo.h6">The Discord bot to serve <span style="text-decoration: underline;">you.</span></MudText>
    
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <div class="mt-6"/>
        </MudHidden>
        
        <MudGrid Justify="Justify.SpaceBetween" Spacing="8" Class="feature-grid">
            <MudItem xs="12" sm="8" md="6" Class="feature-card">
                <MudPaper Class="pb-4">
                    <MudImage Src="img/mute_example.png" Height="150"/>
                    <div class="mt-3"/>
                    <MudContainer>
                        <MudText Class="mb-3" Typo="Typo.h5">Comprehensive logging.</MudText>
                        
                        <MudText Typo="Typo.body2">Logging should be expressive, yet concise.</MudText>
                        <MudText Typo="Typo.body2">Kobalt tells you what's important, by default.</MudText>
                    </MudContainer>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="8" md="6" Class="feature-card">
                <MudPaper Class="pb-4">
                    <MudImage Src="img/artist_verification_example.png" Height="150"/>
                    <div class="mt-3"/>

                    <MudContainer>
                        <MudText Class="mb-3" Typo="Typo.h5">Artist Verification</MudText>

                        <MudText Typo="Typo.body2">Coming soon&trade;, Kobalt will be able to verify artists.</MudText>
                        <MudText Typo="Typo.body2">
                            Artists must opt-in for automatic verification, but <br class="d-md-none"/>
                            Kobalt also offers a robust lookup system to use.
                        </MudText>
                    </MudContainer>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="6" Style="max-width: 40vw">
                <MudPaper Class="pb-4">
                    <MudText Typo="Typo.h4">Lorem Ipsum</MudText>
                </MudPaper>
            </MudItem>

        </MudGrid>
    
    </MudContainer>
</MudLayout>

<MudHidden Breakpoint="Breakpoint.MdAndDown">
    <style>
        .feature-card {
            max-width: calc(max(35vw, 400px));
        }
    </style>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.LgAndUp">
        <style>
            .feature-card {
                padding: 16px 0 !important;
            }
            
            .feature-grid {
                width: 100%;
                margin: 0;
                padding: 0;
            }
            
        </style>
</MudHidden>

@code
{
    [Inject]
    public IBrowserViewportService BreakpointListener { get; set; }
    private MaxWidth _maxWidth;
    
    private readonly Guid _breakpointListenerId = Guid.NewGuid();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            return;
        }
        
        await BreakpointListener.SubscribeAsync
        (
            _breakpointListenerId,
            breakpointArgs =>
            {
                _maxWidth = breakpointArgs.Breakpoint <= Breakpoint.Md ? MaxWidth.Large : MaxWidth.Medium ;
                return Task.CompletedTask;
            }, 
            new ResizeOptions
            {
                ReportRate = 250,
                NotifyOnBreakpointOnly = true,
            }
        );

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BreakpointListener.UnsubscribeAsync(_breakpointListenerId);
}
