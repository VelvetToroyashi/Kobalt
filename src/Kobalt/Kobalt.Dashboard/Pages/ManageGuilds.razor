@page "/Dashboard"
@using Remora.Discord.API.Abstractions.Objects
@using Remora.Discord.API.Abstractions.Rest
@using Remora.Results
@layout DashboardLayout


<MudContainer MaxWidth="MaxWidth.Small">
    <MudText Align="Align.Center" Typo="Typo.h4" Class="font-bold">Get started by selecting a guild.</MudText>

    
    @if (_guilds is not {} result)
    {
        <MudProgressCircular Size="Size.Large"/>
    }
    else if (!result.IsSuccess)
    {
        <MudAlert Severity="Severity.Error">@result.Error.Message</MudAlert>
    }
    else
    {
        <MudSelect AnchorOrigin="Origin.BottomCenter" Dense="true" Variant="Variant.Text"  Label="Select a guild..." T="IPartialGuild" bind-Value="_selectedGuild">
            @{var filteredGuilds = result.Entity.Where(x => x.Permissions.Map(p => p.HasPermission(DiscordPermission.ManageGuild)).OrDefault(false));}
            @foreach (var guild in filteredGuilds)
            {
                <MudSelectItem Value="guild" T="IPartialGuild">@guild.Name.Value</MudSelectItem>
            }
        </MudSelect>
    }
</MudContainer>


@code {
    private IPartialGuild? _selectedGuild;

    [Inject]
    public IDiscordRestUserAPI OAuth2 { get; set; }
    
    private Result<IReadOnlyList<IPartialGuild>>? _guilds;

    protected async override Task OnInitializedAsync()
    {
        _guilds ??= await OAuth2.GetCurrentUserGuildsAsync();
        await base.OnInitializedAsync();
    }
}