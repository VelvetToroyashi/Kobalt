@page "/Dashboard"
@using Remora.Discord.API.Abstractions.Objects
@using Remora.Discord.API.Abstractions.Rest
@using Remora.Results
@layout DashboardLayout
@attribute [Authorize]


<MudContainer MaxWidth="MaxWidth.Small">
    @if (_guilds is not {} result)
    {
        <MudText Typo="Typo.h4">Loading your guilds. Hold tight...</MudText>
        <div style="display: flex; flex-direction: column; align-items: center;">
            <MudProgressLinear Color="Color.Tertiary" Indeterminate="true" Size="Size.Large"/>
        </div>
    }
    else if (!result.IsSuccess)
    {
        <MudAlert Severity="Severity.Error">@result.Error.Message</MudAlert>
    }
    else
    {
        <MudText Align="Align.Center" Typo="Typo.h4" Class="font-bold">Get started by selecting a guild.</MudText>
        <MudSelect AnchorOrigin="Origin.BottomCenter" Dense="true" Variant="Variant.Text" ValueChanged="(v) => SelectionUpdated(v.ID.Value.ToString())" FullWidth="true" Label="Select a guild..." T="IPartialGuild" bind-Value="_selectedGuild">
            @{var filteredGuilds = result.Entity.Where(x => x.Permissions.Map(p => p.HasPermission(DiscordPermission.ManageGuild)).OrDefault(false));}
            @foreach (var guild in filteredGuilds)
            {
                <MudSelectItem Value="guild" T="IPartialGuild">@guild.Name.Value</MudSelectItem>
            }
        </MudSelect>
    }
</MudContainer>

@* ReSharper disable once FieldCanBeMadeReadOnly.Local *@
@code {
    #pragma disable CS0414 // Blazor injects this at runtime
    private IPartialGuild? _selectedGuild = null;
    #pragma enable CS0414

    [Inject]
    public required IDiscordRestUserAPI OAuth2 { get; set; }
    
    [CascadingParameter] 
    public required Action<string> SelectionUpdated { get; set; }
    
    private Result<IReadOnlyList<IPartialGuild>>? _guilds;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _guilds ??= await OAuth2.GetCurrentUserGuildsAsync();
            await Task.Delay(1500);
            
            StateHasChanged();
        }
    }
    
}