@using Remora.Plugins
@using Remora.Plugins.Abstractions
@using Kobalt.Core.Blazor

@inject PluginTree Plugins;
@inject IJSRuntime JsRuntime;

@page "/plugin/{PluginName}/{*PathSlug}"
@page "/p/{PluginName}/{*PathSlug}"

<PluginRouter Plugin=@_pluginDescriptor RoutePath=@(PathSlug ?? "/")>
    <Found Context="routeData">
        <RouteView RouteData=routeData />
    </Found>
    
    <NotFound>
        @if (PathSlug is null)
        {
            <h1>Sorry! This plugin doesn't have a configuration.</h1>
        }
        else
        {
            <h3>Sorry, but there's nothing here.</h3>
        }
        
    </NotFound>
</PluginRouter>

<!-- This file is taken from https://github.com/YumeChan-DT/YumeChan/tree/main/src/YumeChan.NetRunner/PluginRoute.razor -->

@code
{
    [Parameter]
    public string? PluginName { get; set; }
    
    [Parameter]
    public string? PathSlug { get; set; }

    private IPluginDescriptor? _pluginDescriptor;
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        var plugin = Plugins.Branches.FirstOrDefault(b => b.Plugin.GetType().Assembly.GetName().Name!.Equals(PluginName, StringComparison.OrdinalIgnoreCase));
        
        _pluginDescriptor = plugin?.Plugin;
    }
    
    protected override bool ShouldRender() => false; // ?
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _pluginDescriptor is not null)
        {
            await JsRuntime.InvokeVoidAsync("setBase", $"/plugin/{PluginName}/");
            await JsRuntime.InvokeVoidAsync("loadCss", "css/plugin.css");
            await JsRuntime.InvokeVoidAsync("loadCss", $"{PluginName}.bundle.scp.css");
            await JsRuntime.InvokeVoidAsync("loadJs", "js/plugin.js");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
